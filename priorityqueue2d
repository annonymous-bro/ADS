#include <iostream> #include <vector>

using namespace std;

class PriorityQueue { private:
vector<vector<int>> pq; int maxPriority;

public:
PriorityQueue(int priorities) : maxPriority(priorities) { pq.resize(priorities);
}

void enqueue(int priority, int data) {
if (priority < 0 || priority >= maxPriority) { cout << "Invalid priority level." << endl; return;
}

pq[priority].push_back(data);
}

int dequeue() {
for (int i = 0; i < maxPriority; ++i) { if (!pq[i].empty()) {
int data = pq[i].back(); pq[i].pop_back(); return data;
}
}

cout << "Priority Queue is empty." << endl; return -1;
}
};

int main() { PriorityQueue pq(3);
 
pq.enqueue(0, 1);
pq.enqueue(1, 2);
pq.enqueue(2, 3);
pq.enqueue(3, 4); // Invalid priority level

cout << pq.dequeue() << endl; cout << pq.dequeue() << endl; cout << pq.dequeue() << endl;
cout << pq.dequeue() << endl; // Priority Queue is empty

return 0;
}
